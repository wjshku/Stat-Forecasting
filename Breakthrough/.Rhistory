#Code and Testing
{
#A function that outputs the probability of Poi large than n(excluding equal)
poi <- function(lambda, n){
p <- 1
if(n < 0){
return(p)
}
for(i in 0:n){
p <- p - exp(-lambda)*lambda^(i)/factorial(i)
}
return(p)
}
#Total Number of breakthroughs recognized at the end of year tp
NumofBreak <- function(breakthroughs,tp){
for(i in length(breakthroughs):1){
if(breakthroughs[i] <= tp){
return(i)
}
}
}
#Probability of more than n_break-np-1 events happening during tp~t
prob_before <- function(t, tp, lambda_hat, np, n_break){
prob <- poi((t-tp)*lambda_hat,n_break-np-1)
return(prob)
}
#Estimate lambda based on Bayesian approach
lambda_esti <- function(startdate, alpha, beta, tp, np){
period <- tp - startdate + 1
return((np+alpha)/(beta+period))
}
#Final model
#List of parameters:
#Breakthroughs is the list of recognized breakthroughs
#n_breaks is the preset number of breakthroughs need for something to happen
#t is the time points of interest
#tp is the present time
#alpha and beta are the hyperparameters
#startdate is the assumed starting date of all breakthroughs
#np is number at the present time
breakthrough <- function(Breakthroughs, n_breaks, t, tp, alpha, beta, startdate){
trials <- data.frame(matrix(rep(1,length(n_breaks)*length(t)),ncol = length(t)), row.names = n_breaks)
colnames(trials) <- t
np <- NumofBreak(Breakthroughs,tp)
lambda_hat <- lambda_esti(startdate, alpha, beta, tp, np)
for(i in 1:length(n_breaks)){
for(j in 1:length(t)){
trials[i,j] <- prob_before(t[j], tp,lambda_hat, np, n_breaks[i])
}
}
trials <- round(trials,2)
return(trials)
}
#input is the dataframe, prob is the vector of percentiles, col is the index of probability column in input
findpercent <- function(input,prob,col){
ind <- prob
i <- 1
for(j in seq(1,length(input[,col]))){
if(input[j,col] < prob[i] && input[j+1,col] >= prob[i]){
ind[i] <- j
i <- i + 1
if(i > length(prob)){
break
}
}
}
return(input[ind,])
}
#Run the program here
alpha <- 1
beta <- 5
startdate <- 1960
tp <- 2022
#This can be used to adjust beta
(length(Breakthroughs) + alpha)/(beta + 2022 - startdate)
Breakthroughs <- c(1970,1980,1989,1997,2010,2016,2018,2022)
n_breaks <- 10:12
t <- seq(2025,2080)
output <- breakthrough(Breakthroughs, n_breaks, t, tp, alpha, beta, startdate)
aggre <- data.frame(year = as.integer(colnames(output)),prob = colMeans(output), row.names = NULL)
findpercent(aggre,c(0.25,0.5,0.75),2)
#Some scenarios
beta <- 10
Breakthroughs <- c(1970,1980,1989,1997,2010,2016,2018,2022)
n_breaks <- 10
beta <- 10
Breakthroughs <- c(1970,1980,1989,1997,2010,2016,2018,2022)
n_breaks <- 11
beta <- 10
Breakthroughs <- c(1970,1980,1989,1997,2010,2016,2018,2022)
n_breaks <- 12
}
#Step2: Choose breakthroughs(Note: this should be those in your "10 milestones" list)
Breakthroughs <- c(1940,1961,2016,2022)
breakthrough <- function(Breakthroughs, n_breaks, t, tp, alpha, beta, startdate){
trials <- data.frame(matrix(rep(1,length(n_breaks)*length(t)),ncol = length(t)), row.names = n_breaks)
colnames(trials) <- t
np <- NumofBreak(Breakthroughs,tp)
lambda_hat <- lambda_esti(startdate, alpha, beta, tp, np)
for(i in 1:length(n_breaks)){
for(j in 1:length(t)){
trials[i,j] <- prob_before(t[j], tp,lambda_hat, np, n_breaks[i])
}
}
trials <- round(trials,2)
return(trials)
}
#input is the dataframe, prob is the vector of percentiles, col is the index of probability column in input
findpercent <- function(input,prob,col){
ind <- prob
i <- 1
for(j in seq(1,length(input[,col]))){
if(input[j,col] < prob[i] && input[j+1,col] >= prob[i]){
ind[i] <- j
i <- i + 1
if(i > length(prob)){
break
}
}
}
return(input[ind,])
}
#Run the program here
alpha <- 1
beta <- 5
startdate <- 1960
tp <- 2022
#This can be used to adjust beta
(length(Breakthroughs) + alpha)/(beta + 2022 - startdate)
Breakthroughs <- c(1970,1980,1989,1997,2010,2016,2018,2022)
n_breaks <- 10:12
t <- seq(2025,2080)
output <- breakthrough(Breakthroughs, n_breaks, t, tp, alpha, beta, startdate)
aggre <- data.frame(year = as.integer(colnames(output)),prob = colMeans(output), row.names = NULL)
findpercent(aggre,c(0.25,0.5,0.75),2)
#This can be used to adjust beta
(length(Breakthroughs) + alpha)/(beta + 2022 - startdate)
Breakthroughs <- c(1970,1980,1989,1997,2010,2016,2018,2022)
n_breaks <- 10:12
t <- seq(2025,2080)
output <- breakthrough(Breakthroughs, n_breaks, t, tp, alpha, beta, startdate)
aggre <- data.frame(year = as.integer(colnames(output)),prob = colMeans(output), row.names = NULL)
findpercent(aggre,c(0.25,0.5,0.75),2)
aggre
rev <- c(10.1,14.7,22.6,34.9,51.3,70.9,94.4,126)
year <- 2018:2025-2018
AI <- data.frame(rev,year)
m1 <- glm(rev~year, data = AI)
m1$deviance
fitted <- m1$fitted.values
plot(year, rev)
lines(year, fitted)
subyear <- 1:5
m2 <- glm(rev~year, data = AI[subyear,],family = Gamma(link = "log"))
m2$deviance
fitted <- m2$fitted.values
plot(year[subyear], rev[subyear])
lines(year[subyear], fitted)
newyears <- seq(6,7,1)
newdf <- data.frame(year = newyears)
newP1 <- predict(m1, newdata = newdf, type = "response")
newP2 <- predict(m2, newdata = newdf, type = "link",se.fit = TRUE)
newP2 <- predict(m2, newdata = newdf, type = "response")
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
alpha <- 0.1
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ci_para[,1]
newd
year
AI[subyear,]
newP2
newP1
upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
alpha <- 0.43
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
alpha <- 0.1
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
alpha <- 0.5
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
alpha <- 0.9
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25% of the total revenue
alpha <- 0.9
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25% of the total revenue
alpha <- 0.1
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25% of the total revenue
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/4
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
upr
(99 + 48)/2
ratio <- 0.1*0.3/2
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25% of the total revenue
alpha <- 0.1
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/2
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr
upr
lwr;upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25% of the total revenue
alpha <- 0.5
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/2
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25% of the total revenue
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/2
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 25, 50, 75 or 100% of the total revenue
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3/3
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
ratio <- 0.1*0.3*0.25
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.3*0.25
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
0
ratio <- 0.1*0.3*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.3*0.33
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.075*0.33
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.075*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.075
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.01*0.33
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.01
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 33, 50 or 100% of the total revenue
alpha <- 0.1
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.01
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 33, 50 or 100% of the total revenue
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.01
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.01*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
200/3
66+48
ratio <- 0.1*0.075*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.1*0.075
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.075
#10% of google's revenue is from other services
#assume natural language processing makes up 5%-10% of other service
#and GPT3 only generates 33, 50 or 100% of the total revenue
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.1*0.075
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
ratio <- 0.01*0.1
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.01*0.1
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.01*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.02*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.01*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
1/ratio
ratio <- 0.02*0.5
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.02*0.25
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.02*0.50
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.02*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
alpha <- 0.5
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.02*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
alpha <- 0.4
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.02*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
alpha <- 0.2
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.02*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
490/4
390/4
390/4+48
(390/4+48)/2
ratio <- 0.02*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.04*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.03*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
alpha <- 0.01
newd <- t(data.matrix(data.frame(intce = rep(1,length(newyears)),year = newyears)))
ci_para <- confint(m2,level = 1-alpha)
ratio <- 0.03*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.03*0.20
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
%
#chosen 0.01 + 0.40: 100%
#chosen 0.02 + 0.20: 100%
#chosen 0.02 + 0.40: 90%
ratio <- 0.03*0.20
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.03*0.40
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
490/600
80+48
ratio <- 0.075*0.25
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.20*0.05
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.10*0.05
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.10*0.10
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.20*0.05
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.15*0.05
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
ratio <- 0.15*0.1
lwr <- family(m2)$linkinv(ci_para[,1] %*% newd)*ratio
upr <- family(m2)$linkinv(ci_para[,2] %*% newd)*ratio
lwr;upr
